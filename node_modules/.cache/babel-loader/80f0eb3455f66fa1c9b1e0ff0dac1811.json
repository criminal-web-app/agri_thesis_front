{"ast":null,"code":"import _objectSpread from \"/home/cdi_5/agri_thesis_front/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"/home/cdi_5/agri_thesis_front/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/cdi_5/agri_thesis_front/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/cdi_5/agri_thesis_front/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/cdi_5/agri_thesis_front/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/cdi_5/agri_thesis_front/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/cdi_5/agri_thesis_front/src/components/InputDisplays.js\";\nimport React, { Component } from 'react';\nimport { InputGroupAddon, Input, FormFeedback, FormGroup, ListGroupItem } from 'reactstrap';\nimport { AvField, AvGroup, AvInput, AvFeedback } from 'availity-reactstrap-validation';\nimport { Helpers, lS, DefaultState, TOAST, OPTIONS, gDp } from '../helpers/helpers';\n\nvar inputDisplays =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(inputDisplays, _Component);\n\n  function inputDisplays() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, inputDisplays);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(inputDisplays)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _this.onInputChange = function (elementId) {\n      var numbers_only = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      var element = document.getElementById(elementId);\n\n      if (element) {\n        element.addEventListener(\"keydown\", function (e) {\n          if ([69, 187, 189, 109].includes(e.keyCode)) {\n            e.preventDefault();\n          }\n        });\n      }\n    };\n\n    _this.onInputKeyUp = function (elementId) {\n      var element = document.getElementById(elementId);\n\n      if (element) {\n        element.addEventListener(\"keyup\", function (e) {\n          if (e.target.value.length > 10) {\n            e.target.value = e.target.value.slice(0, 10);\n          }\n        });\n      }\n    };\n\n    _this.validateInputSelectError = function (input, data) {\n      if (input.isRequired) {\n        if (input.selectedValue === '' || typeof input.selectedValue === 'undefined') {\n          input.error = {\n            message: 'Required'\n          };\n        } else {\n          delete input.error;\n        }\n      }\n    };\n\n    return _this;\n  }\n\n  _createClass(inputDisplays, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$props = this.props,\n          data = _this$props.data,\n          inputs = _this$props.inputs,\n          selectedValue = _this$props.selectedValue,\n          showTitle = _this$props.showTitle;\n      var timeout = null;\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 45\n        },\n        __self: this\n      }, Object.keys(inputs).map(function (key, idx) {\n        return React.createElement(\"div\", {\n          key: idx,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 47\n          },\n          __self: this\n        }, showTitle && React.createElement(\"strong\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 48\n          },\n          __self: this\n        }, key), inputs[key].map(function (input, idx) {\n          input.isUnique = typeof input.isUnique !== 'undefined' ? input.isUnique : true;\n          var inputOptionFind = [];\n\n          if (input.type === 'select-dropdown') {\n            input.options = (input.options || []).map(function (item) {\n              return input.returnLabel ? _objectSpread({}, item, {\n                label: item.label,\n                value: item.label\n              }) : typeof input.customLabel === 'function' ? _objectSpread({}, item, input.customLabel(item)) : _objectSpread({}, item);\n            });\n            if (input.isUnique) input.options = Helpers.removeDuplicates(input.options);\n            inputOptionFind = input.options.filter(function (o) {\n              return !input.isMulti ? o.value === input.selectedValue : input.selectedValue.split(input.separator || ';').includes(o.value);\n            }) || [];\n            input.selectedOption = inputOptionFind;\n          }\n\n          _this2.validateInputSelectError(input, data);\n\n          return React.createElement(\"div\", {\n            key: idx,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 68\n            },\n            __self: this\n          }, input.type === 'select' ? React.createElement(\"div\", {\n            style: input.style,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 70\n            },\n            __self: this\n          }, React.createElement(AvField, Object.assign({\n            bsSize: \"sm\",\n            required: input.isRequired,\n            name: input.name,\n            type: input.type,\n            label: input.label,\n            placeholder: input.label,\n            autoComplete: input.name,\n            value: data ? data[input.name] : \"\",\n            onChange: function onChange(e) {\n              gDp(input, 'handleInputChange', function () {\n                return function () {};\n              })({\n                input: input,\n                data: data[input.name]\n              })(e);\n            },\n            disabled: input.disabled || false // typeof input.disabled  !== 'undefined' \n            //     ? input.disabled : data[input.name] \n            //     ? false : true\n\n          }, input.hasGrid ? {\n            grid: input.gridStyle\n          } : {}, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 71\n            },\n            __self: this\n          }), input.hasEmptyOption && React.createElement(\"option\", {\n            value: \"\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 89\n            },\n            __self: this\n          }, \"Select...\"), input.options.map(function (option, idx) {\n            return React.createElement(\"option\", {\n              key: idx,\n              value: option.value || option[(input.optionKeys || {}).value],\n              disabled: option.value || option[(input.optionKeys || {}).value] ? false : true,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 91\n              },\n              __self: this\n            }, option.label || option[(input.optionKeys || {}).label]);\n          }))) : input.type === 'tel' ? React.createElement(\"div\", {\n            style: input.style,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 102\n            },\n            __self: this\n          }, React.createElement(\"label\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 103\n            },\n            __self: this\n          }, input.label), React.createElement(Input // tag={InputMask}\n          , {\n            placeholder: input.label,\n            onChange: input.handleInputChange({\n              input: input,\n              title: key\n            }),\n            bsSize: \"sm\",\n            type: \"tel\",\n            mask: input.format,\n            value: input.value || '',\n            required: input.isRequired,\n            invalid: input.invalid,\n            disabled: input.disabled,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 104\n            },\n            __self: this\n          }), React.createElement(AvField, {\n            required: input.isRequired,\n            name: input.name,\n            type: 'hidden',\n            value: input.value || \"\",\n            validate: input.validators || {},\n            disabled: input.disabled,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 122\n            },\n            __self: this\n          })) : input.type === 'file' ? React.createElement(\"div\", {\n            style: input.style,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 133\n            },\n            __self: this\n          }, React.createElement(AvField, {\n            bsSize: \"sm\",\n            required: input.isRequired,\n            name: input.name,\n            type: 'file',\n            label: input.label,\n            onChange: function onChange(e) {\n              gDp(input, 'handleInputChange', function () {\n                return function () {};\n              })(e);\n            },\n            accept: \"image/gif, image/jpeg, image/png\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 134\n            },\n            __self: this\n          })) : input.type !== 'select' && !input.inputGroup ? React.createElement(\"div\", {\n            style: input.style,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 147\n            },\n            __self: this\n          }, React.createElement(AvField, Object.assign({}, input.elementId ? {\n            id: input.elementId\n          } : {}, {\n            className: \" \".concat(input.className, \" \"),\n            bsSize: \"sm\",\n            required: input.isRequired,\n            name: input.name,\n            type: input.type,\n            label: input.label,\n            placeholder: input.label,\n            autoComplete: input.name,\n            value: data ? data[input.name] : \"\",\n            validate: input.validators || {},\n            disabled: input.disabled // pattern={`\"${input.pattern}\"` || {}}\n            ,\n            onChange: function onChange(e) {\n              _this2.onInputChange(input.elementId);\n\n              if (input.hasOnChange) {\n                input.handleInputChange(e.target.value);\n              }\n            },\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 148\n            },\n            __self: this\n          }))) : input.type !== 'select' && input.inputGroup && React.createElement(\"div\", {\n            style: input.style,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 174\n            },\n            __self: this\n          }, React.createElement(\"label\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 175\n            },\n            __self: this\n          }, input.label), React.createElement(AvGroup, {\n            className: \"input-group input-group-sm\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 176\n            },\n            __self: this\n          }, input.inputGroupProps.pre && React.createElement(InputGroupAddon, {\n            addonType: \"prepend\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 178\n            },\n            __self: this\n          }, input.inputGroupProps.pre), React.createElement(AvInput, Object.assign({}, input.elementId ? {\n            id: input.elementId\n          } : {}, {\n            className: \" \".concat(input.className, \" \"),\n            bsSize: \"sm\",\n            required: input.isRequired,\n            name: input.name,\n            type: input.type,\n            placeholder: input.label,\n            autoComplete: input.name,\n            value: data ? data[input.name] : \"\",\n            validate: input.validators || {},\n            disabled: input.disabled,\n            min: input.min // step={input.validators.step.value}\n\n          }, input.validators.min ? {\n            min: input.validators.min.value\n          } : {}, {\n            onChange: _this2.onInputChange(input.elementId),\n            onKeyUp: _this2.onInputKeyUp(input.elementId),\n            style: {\n              borderRadius: '0px 4px 4px 0px'\n            },\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 181\n            },\n            __self: this\n          })), input.inputGroupProps.suf && React.createElement(InputGroupAddon, {\n            addonType: \"append\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 203\n            },\n            __self: this\n          }, input.inputGroupProps.suf), React.createElement(AvFeedback, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 206\n            },\n            __self: this\n          }, input.validators.required.errorMessage))));\n        }));\n      }));\n    }\n  }]);\n\n  return inputDisplays;\n}(Component);\n\nexport default inputDisplays;","map":{"version":3,"sources":["/home/cdi_5/agri_thesis_front/src/components/InputDisplays.js"],"names":["React","Component","InputGroupAddon","Input","FormFeedback","FormGroup","ListGroupItem","AvField","AvGroup","AvInput","AvFeedback","Helpers","lS","DefaultState","TOAST","OPTIONS","gDp","inputDisplays","onInputChange","elementId","numbers_only","element","document","getElementById","addEventListener","e","includes","keyCode","preventDefault","onInputKeyUp","target","value","length","slice","validateInputSelectError","input","data","isRequired","selectedValue","error","message","props","inputs","showTitle","timeout","Object","keys","map","key","idx","isUnique","inputOptionFind","type","options","item","returnLabel","label","customLabel","removeDuplicates","filter","o","isMulti","split","separator","selectedOption","style","name","disabled","hasGrid","grid","gridStyle","hasEmptyOption","option","optionKeys","handleInputChange","title","format","invalid","validators","inputGroup","id","className","hasOnChange","inputGroupProps","pre","min","borderRadius","suf","required","errorMessage"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\r\nimport { InputGroupAddon, Input, FormFeedback, FormGroup, ListGroupItem } from 'reactstrap'\r\nimport { AvField, AvGroup, AvInput, AvFeedback } from 'availity-reactstrap-validation'\r\nimport { Helpers, lS, DefaultState, TOAST, OPTIONS, gDp  } from '../helpers/helpers'\r\n\r\nclass inputDisplays extends Component {\r\n\r\n    onInputChange = (elementId, numbers_only=false) => {\r\n        const element = document.getElementById(elementId)\r\n        if (element) {\r\n            element.addEventListener(\"keydown\", function(e) {\r\n                if ([69, 187, 189, 109].includes(e.keyCode)) {\r\n                    e.preventDefault()\r\n                }\r\n            })\r\n        }\r\n    }\r\n    onInputKeyUp = (elementId) => {\r\n        const element = document.getElementById(elementId)\r\n        if (element) {\r\n            element.addEventListener(\"keyup\", function(e) {\r\n                if (e.target.value.length > 10){\r\n                    e.target.value = e.target.value.slice(0, 10)\r\n                } \r\n            })\r\n        }\r\n    }\r\n\r\n    validateInputSelectError = (input, data) => {\r\n        if (input.isRequired) {\r\n            if (input.selectedValue==='' || typeof input.selectedValue === 'undefined') {\r\n                input.error = { \r\n                    message: 'Required'\r\n                }\r\n            } else {\r\n                delete input.error\r\n            }\r\n        } \r\n    }\r\n\r\n    render() {\r\n        const { data, inputs, selectedValue, showTitle } = this.props\r\n        let timeout = null\r\n        return (\r\n            <div>\r\n                {Object.keys(inputs).map((key, idx) => (\r\n                    <div key={idx}>\r\n                        {showTitle && <strong>{key}</strong>}\r\n                        {inputs[key].map((input, idx) => {\r\n                            input.isUnique = typeof input.isUnique !== 'undefined' ? input.isUnique : true\r\n                            let inputOptionFind = []\r\n                            if (input.type === 'select-dropdown') {\r\n                                input.options = (input.options || []).map((item)=>(\r\n                                    input.returnLabel ? { ...item, label: item.label, value: item.label } : \r\n                                    typeof input.customLabel === 'function' ? { ...item, ...input.customLabel(item)  } :\r\n                                    { ...item }\r\n                                ))\r\n                                if (input.isUnique) input.options = Helpers.removeDuplicates(input.options)\r\n                                inputOptionFind = input.options.filter(o=>(\r\n                                        !input.isMulti ? o.value === input.selectedValue\r\n                                                       : input.selectedValue.split(input.separator||';').includes(o.value)\r\n                                    )\r\n                                ) || []\r\n                                input.selectedOption = inputOptionFind \r\n                            }\r\n                            this.validateInputSelectError(input, data)\r\n                            return (\r\n                                <div key={idx}>\r\n                                    {input.type === 'select' ? (\r\n                                        <div style={input.style}>\r\n                                            <AvField\r\n                                                bsSize={\"sm\"}\r\n                                                required={input.isRequired}\r\n                                                name={input.name}\r\n                                                type={input.type}\r\n                                                label={input.label}\r\n                                                placeholder={input.label}\r\n                                                autoComplete={input.name}\r\n                                                value={data ? data[input.name] : \"\"}\r\n                                                onChange={(e)=>{ gDp(input,'handleInputChange',()=>()=>{})({input, data: data[input.name]})(e) }}\r\n                                                disabled={  \r\n                                                    input.disabled || false\r\n                                                        // typeof input.disabled  !== 'undefined' \r\n                                                        //     ? input.disabled : data[input.name] \r\n                                                        //     ? false : true\r\n                                                }\r\n                                                {...(input.hasGrid) ? {grid:input.gridStyle} : {}}\r\n                                            >\r\n                                                { input.hasEmptyOption && (<option value=''>Select...</option>)}\r\n                                                {input.options.map((option, idx) => (\r\n                                                    <option \r\n                                                        key={idx} \r\n                                                        value={option.value || option[(input.optionKeys||{}).value]} \r\n                                                        disabled={(option.value || (option[(input.optionKeys||{}).value])) ? false : true } >\r\n                                                        {option.label || option[(input.optionKeys||{}).label]}\r\n                                                    </option>\r\n                                                ))}\r\n                                            </AvField>\r\n                                        </div>\r\n                                    ) \r\n                                    : (input.type === 'tel') ? (\r\n                                        <div style={input.style}>\r\n                                            <label>{input.label}</label>\r\n                                            <Input\r\n                                                // tag={InputMask}\r\n                                                placeholder={input.label}\r\n                                                onChange={input.handleInputChange({input, title: key})}\r\n                                                bsSize={\"sm\"}\r\n                                                type=\"tel\"\r\n                                                mask={input.format}\r\n                                                value={input.value || ''}\r\n                                                required={input.isRequired}\r\n                                                invalid={input.invalid}\r\n                                                disabled={input.disabled}\r\n                                            />\r\n                                            {/* {(input.value.length === 0 && input.invalid) && <FormFeedback>\r\n                                                {input.validators.required.errorMessage}\r\n                                            </FormFeedback>}\r\n                                            {(input.invalid) && <FormFeedback>\r\n                                                {input.validators.minLength.errorMessage}\r\n                                            </FormFeedback>} */}\r\n                                            <AvField\r\n                                                required={input.isRequired}\r\n                                                name={input.name}\r\n                                                type={'hidden'}\r\n                                                value={input.value || \"\"}\r\n                                                validate={input.validators || {}} \r\n                                                disabled={input.disabled}\r\n                                            />\r\n                                        </div>\r\n                                    )\r\n                                    : (input.type === 'file') ? (\r\n                                        <div style={input.style}>\r\n                                            <AvField\r\n                                                bsSize={\"sm\"}\r\n                                                required={input.isRequired}\r\n                                                name={input.name}\r\n                                                type={'file'}\r\n                                                label={input.label}\r\n                                                onChange={(e)=>{ gDp(input,'handleInputChange',()=>()=>{})(e) }}\r\n                                                accept=\"image/gif, image/jpeg, image/png\"\r\n                                            >\r\n                                            </AvField>\r\n                                        </div>\r\n                                    )\r\n                                    : (input.type !== 'select' && !input.inputGroup) ? (\r\n                                        <div style={input.style}>\r\n                                            <AvField\r\n                                                {...(input.elementId) ? {id:input.elementId} : {}}\r\n                                                className={\r\n                                                    ( ` ${input.className} `)\r\n                                                }\r\n                                                bsSize={\"sm\"}\r\n                                                required={input.isRequired}\r\n                                                name={input.name}\r\n                                                type={input.type}\r\n                                                label={input.label}\r\n                                                placeholder={input.label}\r\n                                                autoComplete={input.name}\r\n                                                value={data ? data[input.name] : \"\"}\r\n                                                validate={input.validators || {}}\r\n                                                disabled={input.disabled}\r\n                                                // pattern={`\"${input.pattern}\"` || {}}\r\n                                                onChange={(e)=>{\r\n                                                    this.onInputChange(input.elementId)\r\n                                                    if (input.hasOnChange) {\r\n                                                        input.handleInputChange(e.target.value)\r\n                                                    }\r\n                                                }}\r\n                                            />\r\n                                        </div>\r\n                                    )\r\n                                    : (input.type !== 'select' && input.inputGroup) && (\r\n                                        <div style={input.style}>\r\n                                            <label>{input.label}</label>\r\n                                            <AvGroup className=\"input-group input-group-sm\">\r\n                                                {input.inputGroupProps.pre && \r\n                                                    <InputGroupAddon addonType=\"prepend\" >\r\n                                                        { input.inputGroupProps.pre }\r\n                                                    </InputGroupAddon>} \r\n                                                <AvInput \r\n                                                    {...(input.elementId) ? {id:input.elementId} : {}}\r\n                                                    className={\r\n                                                        ( ` ${input.className} `)\r\n                                                    }\r\n                                                    bsSize={\"sm\"}\r\n                                                    required={input.isRequired}\r\n                                                    name={input.name}\r\n                                                    type={input.type}\r\n                                                    placeholder={input.label}\r\n                                                    autoComplete={input.name}\r\n                                                    value={data ? data[input.name] : \"\"} \r\n                                                    validate={input.validators || {}}\r\n                                                    disabled={input.disabled}\r\n                                                    min={input.min}\r\n                                                    // step={input.validators.step.value}\r\n                                                    {...(input.validators.min) ? {min:input.validators.min.value} : {}}\r\n                                                    onChange={this.onInputChange(input.elementId)}\r\n                                                    onKeyUp={this.onInputKeyUp(input.elementId)}\r\n                                                    style={{borderRadius: '0px 4px 4px 0px'}}\r\n                                                /> \r\n                                                {input.inputGroupProps.suf && \r\n                                                    <InputGroupAddon addonType=\"append\">\r\n                                                        { input.inputGroupProps.suf }\r\n                                                    </InputGroupAddon>} \r\n                                                <AvFeedback>{ input.validators.required.errorMessage }</AvFeedback>\r\n                                            </AvGroup>\r\n                                        </div>\r\n                                    )\r\n                                    } \r\n                                </div> \r\n                            )\r\n                        })}\r\n                    </div>\r\n                ))} \r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default inputDisplays;"]},"metadata":{},"sourceType":"module"}