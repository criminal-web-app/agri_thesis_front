{"ast":null,"code":"import _defineProperty from \"/home/cdi_5/agri_thesis_front/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _objectSpread from \"/home/cdi_5/agri_thesis_front/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"/home/cdi_5/agri_thesis_front/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/cdi_5/agri_thesis_front/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/cdi_5/agri_thesis_front/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/cdi_5/agri_thesis_front/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/cdi_5/agri_thesis_front/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/cdi_5/agri_thesis_front/src/components/users/UserAddEdit.js\";\nimport React, { Component } from 'react';\nimport { withRouter, NavLink } from 'react-router-dom';\nimport { Row, Col, Button } from 'reactstrap';\nimport * as API from '../../services/API';\nimport InputDisplays from '../InputDisplays.js';\nimport { AvForm } from 'availity-reactstrap-validation';\nimport { Helpers, TOAST, REG_EX_NO_SPACE, REG_EX_EMAIL } from '../../helpers/helpers';\nimport Loader from '../Loader';\nvar pass_min = 6;\n\nvar qs = require('query-string');\n\nvar roles = [{\n  label: 'admin',\n  value: 'admin'\n}, {\n  label: 'customer',\n  value: 'customer'\n}, {\n  label: 'staff',\n  value: 'staff'\n}];\n\nvar UserAddEdit =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(UserAddEdit, _Component);\n\n  function UserAddEdit() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, UserAddEdit);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(UserAddEdit)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.urlSearch = qs.parse(_this.props.history.location.search);\n    _this.state = {\n      data: {},\n      isLoading: _this.props.method === 'Update' ? true : false,\n      fields: [{\n        title: \"User Details\",\n        inputs: [{\n          name: \"first_name\",\n          label: \"First Name*\",\n          type: \"text\",\n          isRequired: true,\n          validators: {\n            required: {\n              value: true,\n              errorMessage: \"Please enter first name\"\n            },\n            minLength: {\n              value: 2,\n              errorMessage: \"First Name too short\"\n            }\n          }\n        }, {\n          name: \"last_name\",\n          label: \"Last Name*\",\n          type: \"text\",\n          isRequired: true,\n          validators: {\n            required: {\n              value: true,\n              errorMessage: \"Please enter last name\"\n            },\n            minLength: {\n              value: 2,\n              errorMessage: \"Last Name too short\"\n            }\n          }\n        }, {\n          name: \"username\",\n          label: \"Username*\",\n          type: \"text\",\n          isRequired: true,\n          validators: {\n            required: {\n              value: true,\n              errorMessage: \"Please enter username\"\n            },\n            pattern: {\n              value: REG_EX_NO_SPACE,\n              errorMessage: \"Username cannot contain space\"\n            } // minLength: {value: 2, errorMessage: `Username too short`},\n            // maxLength: {value: 16, errorMessage: `Username too long`}\n\n          }\n        }, {\n          name: \"password\",\n          label: \"Password*\",\n          type: \"password\",\n          isRequired: true,\n          style: _this.props.hidePass,\n          validators: {\n            required: {\n              value: true,\n              errorMessage: \"Please enter your password\"\n            },\n            minLength: {\n              value: pass_min,\n              errorMessage: \"Your password must be atleast 6 characters\"\n            }\n          }\n        }, {\n          name: \"confirm_password\",\n          label: \"Confirm Password*\",\n          type: \"password\",\n          isRequired: true,\n          style: _this.props.hidePass,\n          validators: {\n            match: {\n              value: 'password',\n              errorMessage: 'Password does not match'\n            },\n            required: {\n              value: true,\n              errorMessage: \"Please enter confirm password\"\n            }\n          }\n        }, {\n          name: \"email\",\n          label: \"Email*\",\n          type: \"email\",\n          isRequired: true,\n          validators: {\n            required: {\n              value: true,\n              errorMessage: \"Please enter email address\"\n            },\n            pattern: {\n              value: REG_EX_EMAIL,\n              errorMessage: \"Your email address must be valid\"\n            }\n          }\n        }, {\n          name: \"phone_number\",\n          label: \"Phone Number*\",\n          type: \"number\",\n          min: \"0\",\n          isRequired: true,\n          underscores: 0,\n          number_only: true,\n          format: \"^[0-9]*$\",\n          validators: {\n            required: {\n              value: true,\n              errorMessage: \"Please enter contact number\"\n            },\n            minLength: {\n              value: 11,\n              errorMessage: \"Please provide valid number\"\n            },\n            min: {\n              value: parseInt(9050000000),\n              errorMessage: \"Please provide valid number\"\n            },\n            max: {\n              value: parseInt(9999999999),\n              errorMessage: \"Please provide valid number\"\n            }\n          } // handleInputChange: ({input, title}) => (event)=>{ \n          //     const st = this.state\n          //     const val = event.target.value || ''\n          //     const bool = event.target.value.includes('_') ? true : false \n          //     const underscores = event.target.value.match(/_/g)\n          //     const n_underscores = (!underscores) ? 0 : underscores.length\n          //     this.setState({ \n          //         fields: [\n          //             {\n          //                 ...fields[0],\n          //                 inputs: [\n          //                     ...st.fields[index].inputs.map(inp=>{ \n          //                         return (inp.name===input.name) ? { \n          //                             ...inp, \n          //                             invalid: bool,\n          //                             value:event.target.value,\n          //                             underscores:n_underscores,\n          //                             validators:{\n          //                                 ...inp.validators,\n          //                                 minLength:{ ...inp.validators.minLength, value:(n_underscores > 0 && n_underscores < 10) ? 17 : 16 },\n          //                                 maxLength:{ ...inp.validators.maxLength, value:(n_underscores > 0 && n_underscores < 10) ? 17 : 16 }\n          //                             }\n          //                         } : { ...inp }\n          //                     }) \n          //                 ]\n          //             }\n          //         ] \n          //     }, ()=> {\n          //         this.formHandleChange(input.name, val)\n          //     })\n          // }\n\n        }, {\n          name: \"role\",\n          label: \"Role*\",\n          type: \"select\",\n          isRequired: true,\n          hasEmptyOption: true,\n          options: roles\n        }, {\n          name: \"address\",\n          label: \"Address*\",\n          type: \"text\",\n          isRequired: true,\n          validators: {\n            required: {\n              value: true,\n              errorMessage: \"Please enter address\"\n            }\n          }\n        }]\n      }]\n    };\n    _this.prevColumn = _this.state.columns || {};\n\n    _this.handleEmptyField = function (accessor, value) {\n      var data = _this.state.data;\n      var val = typeof value === 'undefined' ? '' : value;\n\n      _this.setState({\n        data: _objectSpread({}, data, _defineProperty({}, accessor, val))\n      });\n    };\n\n    _this.selectActionToggled = function (item) {\n      _this.setState({\n        itemData: item\n      });\n    };\n\n    _this.changeKeyValue = function (key, value) {\n      _this.setState(function (oldState) {\n        return _defineProperty({}, key, value || !oldState[key]);\n      });\n    };\n\n    _this.formHandleChange = function (e, v) {\n      var st = _this.state;\n      var name = typeof e === \"object\" ? e.target.name : e;\n      var value = typeof e === \"object\" ? e.target.value : v;\n      var newData = Helpers.setDataIterate(name, value)(st.data, '');\n\n      _this.setState({\n        data: newData\n      });\n    };\n\n    _this.getUser = function () {\n      var id = _this.props.match.params.id;\n      API.getUser(id).then(function (response) {\n        _this.setState({\n          data: _objectSpread({}, response.data[0], {\n            confirm_password: '123456',\n            password: '123456'\n          })\n        });\n      }, function (err) {\n        TOAST.pop({\n          message: err.message,\n          type: 'error'\n        });\n      });\n    };\n\n    _this.handleSubmit = function (event, values) {\n      var method = _this.props.method;\n\n      _this.setState({\n        has_submit: true\n      });\n\n      if (method === 'Create') {\n        _this.handleCreateSubmit(values);\n      } else {\n        _this.handleUpdateSubmit(values);\n      }\n    };\n\n    _this.handleCreateSubmit = function (values) {\n      API.createUser(values).then(function (response) {\n        _this.props.history.goBack();\n\n        TOAST.pop({\n          message: 'Successfully created user!'\n        });\n      }, function (err) {\n        TOAST.pop({\n          message: err.message,\n          type: 'error'\n        });\n      }).finally(function () {\n        return _this.setState({\n          has_submit: false\n        });\n      });\n    };\n\n    _this.handleUpdateSubmit = function (values) {\n      var id = _this.props.match.params.id;\n      delete values.confirm_password;\n      delete values.password;\n      var params = {\n        role: values.role\n      };\n      API.updateUser(values, id, {\n        params: params\n      }).then(function (response) {\n        _this.props.history.goBack();\n\n        TOAST.pop({\n          message: 'Successfully updated user!'\n        });\n      }, function (err) {\n        TOAST.pop({\n          message: err.message,\n          type: 'error'\n        });\n      }).finally(function () {\n        return _this.setState({\n          has_submit: false\n        });\n      });\n    };\n\n    _this.resetForm = function () {\n      _this.form && _this.form.reset(); // this.form._inputs.status.value = this.state.defaultStatus\n    };\n\n    _this.toggleLoading = function (flag) {\n      _this.setState(function (oldState) {\n        return {\n          searchLoading: flag\n        };\n      });\n    };\n\n    _this.toggleButton = function (path) {\n      _this.props.history.push(path);\n    };\n\n    _this.componentDidMount = function () {\n      var method = _this.props.method;\n\n      if (method === 'Update') {\n        _this.getUser();\n      }\n    };\n\n    return _this;\n  }\n\n  _createClass(UserAddEdit, [{\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      var st = this.state;\n      this.setState({\n        checkData: [],\n        data: []\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var that = this;\n      var st = this.state;\n      var _this$state = this.state,\n          data = _this$state.data,\n          fields = _this$state.fields;\n      var method = this.props.method;\n      var inputs = fields.reduce(function (inputs, step) {\n        return _objectSpread({}, inputs, _defineProperty({}, step.title, step.inputs));\n      }, {});\n      return React.createElement(Row, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 284\n        },\n        __self: this\n      }, React.createElement(Col, {\n        lg: \"6\",\n        md: \"9\",\n        sm: \"11\",\n        xs: \"11\",\n        style: {\n          border: '2px solid rgb(252, 168, 108)',\n          padding: '20px',\n          margin: 'auto'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 285\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 286\n        },\n        __self: this\n      }, React.createElement(\"h4\", {\n        style: {\n          textAlign: 'center'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 287\n        },\n        __self: this\n      }, method, \" User!\"), React.createElement(AvForm, {\n        onValidSubmit: this.handleSubmit,\n        ref: function ref(c) {\n          return _this2.form = c;\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 288\n        },\n        __self: this\n      }, React.createElement(Row, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 289\n        },\n        __self: this\n      }, React.createElement(Col, {\n        xs: 12,\n        sm: 12,\n        md: 12,\n        lg: 10,\n        style: {\n          margin: 'auto'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 290\n        },\n        __self: this\n      }, React.createElement(InputDisplays, {\n        inputs: inputs,\n        data: data,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 291\n        },\n        __self: this\n      }))), React.createElement(Row, {\n        className: \"margin-bottom-md\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 298\n        },\n        __self: this\n      }, React.createElement(Col, {\n        xs: 12,\n        sm: 12,\n        md: 12,\n        lg: 10,\n        align: \"right\",\n        style: {\n          margin: 'auto'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 299\n        },\n        __self: this\n      }, React.createElement(Button, {\n        type: \"button\",\n        color: \"secondary\" // className=\"float-left\"\n        ,\n        style: {\n          marginRight: '20px'\n        },\n        onClick: this.resetForm,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 300\n        },\n        __self: this\n      }, \"Clear\"), React.createElement(Button, {\n        type: \"submit\" // className=\"float-right\" \n        ,\n        color: \"primary\",\n        disabled: st.has_submit,\n        onClick: this.createUser,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 306\n        },\n        __self: this\n      }, \"Submit\")))))), React.createElement(Loader, {\n        message: React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 321\n          },\n          __self: this\n        }, React.createElement(\"p\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 323\n          },\n          __self: this\n        }, \"Loading...\")),\n        isLoading: st.isLoading || false,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 319\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return UserAddEdit;\n}(Component);\n\nexport default withRouter(UserAddEdit);","map":{"version":3,"sources":["/home/cdi_5/agri_thesis_front/src/components/users/UserAddEdit.js"],"names":["React","Component","withRouter","NavLink","Row","Col","Button","API","InputDisplays","AvForm","Helpers","TOAST","REG_EX_NO_SPACE","REG_EX_EMAIL","Loader","pass_min","qs","require","roles","label","value","UserAddEdit","urlSearch","parse","props","history","location","search","state","data","isLoading","method","fields","title","inputs","name","type","isRequired","validators","required","errorMessage","minLength","pattern","style","hidePass","match","min","underscores","number_only","format","parseInt","max","hasEmptyOption","options","prevColumn","columns","handleEmptyField","accessor","val","setState","selectActionToggled","item","itemData","changeKeyValue","key","oldState","formHandleChange","e","v","st","target","newData","setDataIterate","getUser","id","params","then","response","confirm_password","password","err","pop","message","handleSubmit","event","values","has_submit","handleCreateSubmit","handleUpdateSubmit","createUser","goBack","finally","role","updateUser","resetForm","form","reset","toggleLoading","flag","searchLoading","toggleButton","path","push","componentDidMount","checkData","that","reduce","step","border","padding","margin","textAlign","c","marginRight"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport { withRouter, NavLink } from 'react-router-dom' \nimport { Row, Col, Button } from 'reactstrap'\n\nimport * as API from '../../services/API'\n\nimport InputDisplays from '../InputDisplays.js'\nimport { AvForm } from 'availity-reactstrap-validation'\nimport { Helpers, TOAST, REG_EX_NO_SPACE, REG_EX_EMAIL } from '../../helpers/helpers'\n\nimport Loader from '../Loader'\n\nconst pass_min = 6\nconst qs = require('query-string');\nconst roles = [{label: 'admin', value: 'admin'},\n                {label: 'customer', value: 'customer'},\n                {label: 'staff', value: 'staff'}]\n\nclass UserAddEdit extends Component {\n    urlSearch = qs.parse(this.props.history.location.search)\n    state = {\n        data: {},\n        isLoading: this.props.method==='Update' ? true : false,\n        fields: [\n            {\n                title: \"User Details\",\n                inputs: [\n                    {\n                        name: \"first_name\",\n                        label: \"First Name*\",\n                        type: \"text\",\n                        isRequired: true,\n                        validators: {\n                            required: {value: true, errorMessage: \"Please enter first name\"}, \n                            minLength: {value: 2, errorMessage: `First Name too short`},\n                        }\n                    },\n                    {\n                        name: \"last_name\",\n                        label: \"Last Name*\",\n                        type: \"text\",\n                        isRequired: true,\n                        validators: {\n                            required: {value: true, errorMessage: \"Please enter last name\"}, \n                            minLength: {value: 2, errorMessage: `Last Name too short`},\n                        }\n                    },\n                    {\n                        name: \"username\",\n                        label: \"Username*\",\n                        type: \"text\",\n                        isRequired: true,\n                        validators: {\n                            required: {value: true, errorMessage: \"Please enter username\"}, \n                            pattern: {value: REG_EX_NO_SPACE, errorMessage: `Username cannot contain space`},\n                            // minLength: {value: 2, errorMessage: `Username too short`},\n                            // maxLength: {value: 16, errorMessage: `Username too long`}\n                        }\n                    },\n                    {\n                        name: \"password\",\n                        label: \"Password*\",\n                        type: \"password\",\n                        isRequired: true,\n                        style: this.props.hidePass,\n                        validators: {\n                            required: {value: true, errorMessage: \"Please enter your password\"},\n                            minLength: {value: pass_min, errorMessage: `Your password must be atleast 6 characters`},\n                        }\n                    },\n                    {\n                        name: \"confirm_password\",\n                        label: \"Confirm Password*\",\n                        type: \"password\",\n                        isRequired: true,\n                        style: this.props.hidePass,\n                        validators: {\n                            match:{value:'password', errorMessage: 'Password does not match'},\n                            required: {value: true, errorMessage: \"Please enter confirm password\"},\n                        }\n                    },\n                    {\n                        name: \"email\",\n                        label: \"Email*\",\n                        type: \"email\",\n                        isRequired: true,\n                        validators: {\n                            required: {value: true, errorMessage: \"Please enter email address\"}, \n                            pattern: {value: REG_EX_EMAIL, errorMessage: `Your email address must be valid`},\n                        }\n                    },\n                    {\n                        name: \"phone_number\",\n                        label: \"Phone Number*\", \n                        type: \"number\",\n                        min: \"0\",\n                        isRequired: true, \n                        underscores:0,\n                        number_only: true,\n                        format: \"^[0-9]*$\",\n                        validators: {\n                            required: {value: true, errorMessage: \"Please enter contact number\"}, \n                            minLength: {value: 11, errorMessage: `Please provide valid number`}, \n                            min: {value: parseInt(9050000000), errorMessage: `Please provide valid number`},\n                            max: {value: parseInt(9999999999), errorMessage: `Please provide valid number`}\n                        },\n                        // handleInputChange: ({input, title}) => (event)=>{ \n                        //     const st = this.state\n                        //     const val = event.target.value || ''\n                        //     const bool = event.target.value.includes('_') ? true : false \n                        //     const underscores = event.target.value.match(/_/g)\n                        //     const n_underscores = (!underscores) ? 0 : underscores.length\n                        //     this.setState({ \n                        //         fields: [\n                        //             {\n                        //                 ...fields[0],\n                        //                 inputs: [\n                        //                     ...st.fields[index].inputs.map(inp=>{ \n                        //                         return (inp.name===input.name) ? { \n                        //                             ...inp, \n                        //                             invalid: bool,\n                        //                             value:event.target.value,\n                        //                             underscores:n_underscores,\n                        //                             validators:{\n                        //                                 ...inp.validators,\n                        //                                 minLength:{ ...inp.validators.minLength, value:(n_underscores > 0 && n_underscores < 10) ? 17 : 16 },\n                        //                                 maxLength:{ ...inp.validators.maxLength, value:(n_underscores > 0 && n_underscores < 10) ? 17 : 16 }\n                        //                             }\n                        //                         } : { ...inp }\n                        //                     }) \n                        //                 ]\n                        //             }\n                        //         ] \n                        //     }, ()=> {\n                        //         this.formHandleChange(input.name, val)\n                        //     })\n                        // }\n                    },\n                    {\n                        name: \"role\",\n                        label: \"Role*\",\n                        type: \"select\",\n                        isRequired: true,\n                        hasEmptyOption: true,\n                        options: roles,\n                    },\n                    {\n                        name: \"address\",\n                        label: \"Address*\",\n                        type: \"text\",\n                        isRequired: true,\n                        validators: {\n                            required: {value: true, errorMessage: \"Please enter address\"}, \n                        }\n                    },\n                ]\n            }, \n        ]\n    }\n\n    prevColumn = this.state.columns || {}\n\n    handleEmptyField = (accessor, value) => { \n        const { data } = this.state\n        const val = (typeof value === 'undefined') ? '' : value\n        this.setState({\n            data: {\n                ...data,\n                [accessor]:val\n            }\n        }) \n    }\n\n    selectActionToggled = (item) => {\n        this.setState({\n            itemData: item\n        })\n    }\n\n    changeKeyValue = (key, value) => {\n        this.setState((oldState)=>({\n            [key]: value || !oldState[key]\n        }))\n    }\n\n    formHandleChange = (e, v) => {\n        const st = this.state\n        let name = (typeof e === \"object\") ? e.target.name : e\n        let value = (typeof e === \"object\") ? e.target.value : v\n        let newData = Helpers.setDataIterate(name, value)(st.data, '')\n        this.setState({ data: newData})\n    } \n\n    getUser = () => {\n        const {id} = this.props.match.params\n        API.getUser(id)\n        .then((response)=>{\n            this.setState({data: {...response.data[0],\n                                    confirm_password: '123456',\n                                    password: '123456'}})\n        }, err => {\n            TOAST.pop({message: err.message, type: 'error'})\n        })\n    }\n\n    handleSubmit = (event, values) => {\n        const {method} = this.props\n        this.setState({has_submit: true})\n        if(method==='Create'){\n            this.handleCreateSubmit(values)\n        } else {\n            this.handleUpdateSubmit(values)\n        }\n    }\n\n    handleCreateSubmit = (values) => {\n        API.createUser(values)\n        .then((response)=>{\n            this.props.history.goBack()\n            TOAST.pop({message: 'Successfully created user!'})\n        }, err => {\n            TOAST.pop({message: err.message, type: 'error'})\n        }).finally(()=> \n            this.setState({has_submit: false})\n        )\n    } \n\n    handleUpdateSubmit = (values) => {\n        const {id} = this.props.match.params\n        delete values.confirm_password\n        delete values.password\n        const params = {\n            role : values.role\n        }\n        API.updateUser(values, id, {params})\n        .then((response)=>{\n            this.props.history.goBack()\n            TOAST.pop({message: 'Successfully updated user!'})\n        },err => {\n            TOAST.pop({message: err.message, type: 'error'})\n        }).finally(()=> \n            this.setState({has_submit: false})\n        )\n    } \n\n    resetForm = () => {\n        this.form && this.form.reset() \n        // this.form._inputs.status.value = this.state.defaultStatus\n    }\n\n    toggleLoading = (flag) => {\n        this.setState(oldState => ({searchLoading: flag}))\n    }\n    toggleButton = (path) => {\n        this.props.history.push(path)\n    }\n\n    componentDidMount = () => {\n        const {method} = this.props\n\n        if(method==='Update'){\n            this.getUser()\n        }\n    }\n\n    componentWillUnmount() {\n        const st = this.state\n        this.setState({checkData: [], data: [] })\n    }\n\n    render() {\n        const that = this\n        const st=this.state;\n\n        const {data, fields} = this.state\n        const {method} = this.props\n        const inputs = fields.reduce((inputs, step) => {\n            return {\n                ...inputs,\n                [step.title]: step.inputs,\n            }\n        }, {})\n        return(\n            <Row >\n                <Col lg=\"6\" md=\"9\" sm=\"11\" xs=\"11\" style={{border: '2px solid rgb(252, 168, 108)', padding: '20px', margin: 'auto'}}>\n                    <div > \n                        <h4 style={{textAlign: 'center'}}>{method} User!</h4>\n                        <AvForm onValidSubmit={this.handleSubmit} ref={c => (this.form = c)}> \n                            <Row>\n                                <Col xs={12} sm={12} md={12} lg={10} style={{margin: 'auto'}}>\n                                    <InputDisplays \n                                        inputs={inputs}\n                                        data={data} \n                                    />\n                                </Col>\n                                {/* <Col xs={12} sm={12} md={12} lg={6}></Col> */}\n                            </Row>\n                            <Row className=\"margin-bottom-md\">\n                                <Col xs={12} sm={12} md={12} lg={10} align=\"right\" style={{margin: 'auto'}}>\n                                    <Button \n                                        type=\"button\" \n                                        color=\"secondary\" \n                                        // className=\"float-left\"\n                                        style={{marginRight: '20px'}}\n                                        onClick={this.resetForm} >Clear</Button>\n                                    <Button \n                                        type=\"submit\" \n                                        // className=\"float-right\" \n                                        color=\"primary\"\n                                        disabled={st.has_submit}\n                                        onClick={this.createUser}>Submit</Button>\n                                </Col>\n                                {/* <Col xs={12} sm={12} md={12} lg={6}></Col> */}\n                            </Row>\n                        </AvForm>\n                        \n                    </div>\n                </Col>\n                <Loader\n                    message={(\n                        <div>\n                            {/* <h4>Fetching reports</h4> */}\n                            <p>Loading...</p>\n                        </div>\n                    )}\n                    isLoading={st.isLoading || false}\n                />\n            </Row>\n        ) ;\n    }\n}\n\nexport default withRouter(UserAddEdit);"]},"metadata":{},"sourceType":"module"}