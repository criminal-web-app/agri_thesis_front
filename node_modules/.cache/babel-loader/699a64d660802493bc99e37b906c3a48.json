{"ast":null,"code":"import _objectSpread from \"/home/cdi_5/Downloads/agri_thesis_front/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"/home/cdi_5/Downloads/agri_thesis_front/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/cdi_5/Downloads/agri_thesis_front/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/cdi_5/Downloads/agri_thesis_front/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/cdi_5/Downloads/agri_thesis_front/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/cdi_5/Downloads/agri_thesis_front/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/cdi_5/Downloads/agri_thesis_front/src/components/PrintReport.js\";\nimport React, { Component } from 'react';\nimport { withRouter } from 'react-router-dom';\nimport * as API from '../services/API';\nimport moment from 'moment';\nimport { gDp } from '../helpers/helpers';\nimport { Row, Col, Button } from 'reactstrap';\nimport { BarChart, Bar, Cell, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from 'recharts';\n\nvar qs = require('query-string');\n\nvar month = new Array();\nmonth[0] = \"January\";\nmonth[1] = \"February\";\nmonth[2] = \"March\";\nmonth[3] = \"April\";\nmonth[4] = \"May\";\nmonth[5] = \"June\";\nmonth[6] = \"July\";\nmonth[7] = \"August\";\nmonth[8] = \"September\";\nmonth[9] = \"October\";\nmonth[10] = \"November\";\nmonth[11] = \"December\";\n\nvar PrintReport =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(PrintReport, _Component);\n\n  function PrintReport() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, PrintReport);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(PrintReport)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.urlSearch = qs.parse(_this.props.history.location.search);\n    _this.state = {\n      report: [],\n      annual_report: [],\n      pageState: {\n        start_date: _this.urlSearch.start_date,\n        end_date: _this.urlSearch.end_date\n      }\n    };\n\n    _this.apiRetrieve = function () {\n      var st = _this.state;\n      var id = _this.props.match.params.id;\n      var params = {\n        start_date: st.pageState.start_date || '',\n        end_date: st.pageState.end_date || ''\n      };\n      !st.pageState.start_date && delete params.start_date;\n      !st.pageState.end_date && delete params.end_date;\n      console.log('Hello');\n      API.getReport(params, id).then(function (response) {\n        var latestReport = response.data[response.data.length - 1];\n        var newfw = JSON.parse(latestReport.avgfw);\n        var newbw = JSON.parse(latestReport.avgbw);\n        var fwRaw = [JSON.parse(latestReport.fw.split(\":\")[0]), JSON.parse(latestReport.fw.split(\":\")[1]), JSON.parse(latestReport.fw.split(\":\")[2])];\n        var bwRaw = [JSON.parse(latestReport.bw.split(\":\")[0]), JSON.parse(latestReport.bw.split(\":\")[1]), JSON.parse(latestReport.bw.split(\":\")[2])];\n        var newReport = [_objectSpread({}, response.data[response.data.length - 1], {\n          fw1: newfw[0],\n          bw1: newbw[0],\n          fw2: newfw[1],\n          bw2: newbw[1],\n          fw3: newfw[2],\n          bw3: newbw[2],\n          fw4: newfw[3],\n          bw4: newbw[3],\n          fw5: newfw[4],\n          bw5: newbw[4],\n          fw6: newfw[5],\n          bw6: newbw[5],\n          fw7: newfw[6],\n          bw7: newbw[6],\n          fw8: newfw[7],\n          bw8: newbw[7]\n        })];\n\n        _this.setState({\n          report: newReport,\n          rawData: {\n            fwRaw: fwRaw,\n            bwRaw: bwRaw,\n            newfw: newfw,\n            newbw: newbw\n          }\n        }, function () {\n          setTimeout(function () {\n            window.print();\n            setTimeout(window.close, 0);\n          }, 500);\n        }); // this.setState({report: response.data},()=>{\n        //     setTimeout(()=>{\n        //         window.print();\n        //         setTimeout(window.close, 0);\n        //     }, 500)\n        // })\n\n      }, function (err) {}).finally(function () {\n        return _this.setState({\n          isLoading: false\n        });\n      });\n    };\n\n    _this.apiAverage = function () {\n      var st = _this.state;\n      var id = _this.props.match.params.id;\n      var params = {\n        start_date: st.pageState.start_date || '',\n        end_date: st.pageState.end_date || ''\n      };\n      !st.pageState.start_date && delete params.start_date;\n      !st.pageState.end_date && delete params.end_date;\n      API.getAverageReports(params).then(function (response) {\n        var report = [_objectSpread({}, response.data, {\n          fw1: response.data.avg_fw1,\n          bw1: response.data.avg_bw1,\n          fw2: response.data.avg_fw2,\n          bw2: response.data.avg_bw2,\n          fw3: response.data.avg_fw3,\n          bw3: response.data.avg_bw3,\n          fw4: response.data.avg_fw4,\n          bw4: response.data.avg_bw4,\n          fw5: response.data.avg_fw5,\n          bw5: response.data.avg_bw5,\n          fw6: response.data.avg_fw6,\n          bw6: response.data.avg_bw6,\n          fw7: response.data.avg_fw7,\n          bw7: response.data.avg_bw7,\n          fw8: response.data.avg_fw8,\n          bw8: response.data.avg_bw8\n        })];\n\n        _this.setState({\n          report: report\n        }, function () {\n          setTimeout(function () {\n            window.print();\n            setTimeout(window.close, 0);\n          }, 500);\n        });\n      }, function (err) {}).finally(function () {\n        return _this.setState({\n          isLoading: false\n        });\n      });\n    };\n\n    _this.apiAnnual = function () {\n      var st = _this.state;\n\n      _this.setState({\n        isLoading: true\n      });\n\n      console.log('isAnnual');\n      API.getAnnualReport().then(function (response) {\n        var report = response.data.map(function (months) {\n          return _objectSpread({}, months, {\n            Month: month[months.Month - 1]\n          });\n        });\n\n        _this.setState({\n          annual_report: report\n        });\n      }, function (err) {// TOAST.pop({message: err.message, type: 'error'})\n      }).finally(function () {\n        return _this.setState({\n          isLoading: false\n        }, function () {\n          setTimeout(function () {\n            window.print();\n            setTimeout(window.close, 0);\n          }, 500);\n        });\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(PrintReport, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var pr = this.props;\n      var id = this.props.match.params.id;\n      console.log(pr);\n      console.log(pr.location.pathname, pr.location.pathname === '/report/print/average');\n\n      if (pr.location.pathname === '/report/print/annual') {\n        this.apiAnnual();\n      } else if (pr.location.pathname === '/report/print/average') {\n        this.apiAverage();\n      } else {\n        this.apiRetrieve();\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var st = this.state;\n      var id = this.props.match.params.id;\n      var isReportId = !['/report/print/annual', '/report/print/average'].includes(this.props.location.pathname);\n      var data = st.report.length ? [{\n        name: 'T1',\n        fw: st.report[0].fw1,\n        bw: st.report[0].bw1\n      }, {\n        name: 'T2',\n        fw: st.report[0].fw2,\n        bw: st.report[0].bw2\n      }, {\n        name: 'T3',\n        fw: st.report[0].fw3,\n        bw: st.report[0].bw3\n      }, {\n        name: 'T4',\n        fw: st.report[0].fw4,\n        bw: st.report[0].bw4\n      }, {\n        name: 'T5',\n        fw: st.report[0].fw5,\n        bw: st.report[0].bw5\n      }, {\n        name: 'T6',\n        fw: st.report[0].fw6,\n        bw: st.report[0].bw6\n      }, {\n        name: 'T7',\n        fw: st.report[0].fw7,\n        bw: st.report[0].bw7\n      }, {\n        name: 'T8',\n        fw: st.report[0].fw8,\n        bw: st.report[0].bw8\n      }] : '';\n      var is_annual = this.props.location.pathname === '/report/print/annual';\n      console.log(st.report, this.props, st);\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 188\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        style: {},\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 189\n        },\n        __self: this\n      }, React.createElement(\"strong\", {\n        style: {\n          fontSize: '24px'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 190\n        },\n        __self: this\n      }, React.createElement(\"span\", {\n        style: {\n          fontSize: '36px'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 190\n        },\n        __self: this\n      }, st.report.length ? st.report[0].name : st.annual_report.length ? 'Annual' : 'Average'), \"\\xA0\", st.pageState.start_date ? \"(\".concat(moment(st.pageState.start_date).format('MMMM DD YYYY')) : '', \" \", st.pageState.end_date ? \"- \".concat(moment(st.pageState.end_date).format('MMMM DD YYYY'), \")\") : '')), React.createElement(Row, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 192\n        },\n        __self: this\n      }, React.createElement(Col, {\n        md: isReportId ? \"10\" : \"12\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 193\n        },\n        __self: this\n      }, is_annual ? React.createElement(ResponsiveContainer, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 195\n        },\n        __self: this\n      }, React.createElement(BarChart // width={800}\n      // height={300}\n      , {\n        data: st.annual_report,\n        margin: {\n          top: 30,\n          right: 15,\n          left: 5,\n          bottom: 15\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 196\n        },\n        __self: this\n      }, React.createElement(XAxis, {\n        dataKey: \"Month\",\n        tickSize: true,\n        dy: \"25\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 204\n        },\n        __self: this\n      }), React.createElement(YAxis, {\n        label: {\n          value: 'Average Weight',\n          angle: -90,\n          position: 'insideLeft'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 206\n        },\n        __self: this\n      }), React.createElement(CartesianGrid, {\n        strokeDasharray: \"3 3\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 207\n        },\n        __self: this\n      }), React.createElement(Legend, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 209\n        },\n        __self: this\n      }), React.createElement(Bar, {\n        name: \"Fresh Weight Test\",\n        dataKey: \"avg_fw\",\n        fill: \"#82ca9d\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 210\n        },\n        __self: this\n      }), React.createElement(Bar, {\n        name: \"Dry Weight Test\",\n        dataKey: \"avg_bw\",\n        fill: \"#8884d8\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 211\n        },\n        __self: this\n      }))) : React.createElement(ResponsiveContainer, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 214\n        },\n        __self: this\n      }, React.createElement(BarChart // width={800}\n      // height={300}\n      , {\n        data: data,\n        margin: {\n          top: 30,\n          right: 15,\n          left: 5,\n          bottom: 15\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 215\n        },\n        __self: this\n      }, React.createElement(XAxis, {\n        dataKey: \"name\",\n        tickSize: true,\n        dy: \"25\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 223\n        },\n        __self: this\n      }), React.createElement(YAxis, {\n        label: {\n          value: 'Average Weight',\n          angle: -90,\n          position: 'insideLeft'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 225\n        },\n        __self: this\n      }), React.createElement(CartesianGrid, {\n        strokeDasharray: \"3 3\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 226\n        },\n        __self: this\n      }), React.createElement(Legend, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 228\n        },\n        __self: this\n      }), React.createElement(Bar, {\n        name: \"Fresh Weight Test\",\n        dataKey: \"fw\",\n        fill: \"#82ca9d\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 229\n        },\n        __self: this\n      }), React.createElement(Bar, {\n        name: \"Dry Weight Test\",\n        dataKey: \"bw\",\n        fill: \"#8884d8\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 230\n        },\n        __self: this\n      })))), isReportId && React.createElement(Col, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 235\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        style: {\n          background: 'white',\n          textAlign: 'center',\n          marginBottom: '5px',\n          borderRadius: '5px'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 236\n        },\n        __self: this\n      }, \"Fresh Weight Test\"), React.createElement(\"table\", {\n        style: {\n          width: '100%'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 237\n        },\n        __self: this\n      }, React.createElement(\"thead\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 238\n        },\n        __self: this\n      }, React.createElement(\"tr\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 239\n        },\n        __self: this\n      }, ['', 'R1', 'R2', 'R3', 'AVERAGE'].map(function (head) {\n        return React.createElement(\"th\", {\n          key: head,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 240\n          },\n          __self: this\n        }, head);\n      }))), React.createElement(\"tbody\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 243\n        },\n        __self: this\n      }, gDp(st, 'rawData.fwRaw', []).length ? [1, 2, 3, 4, 5, 6, 7, 8].map(function (row, index) {\n        return React.createElement(\"tr\", {\n          key: index,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 244\n          },\n          __self: this\n        }, React.createElement(\"td\", {\n          style: {\n            textAlign: 'center'\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 245\n          },\n          __self: this\n        }, \"T\", index + 1), React.createElement(\"td\", {\n          style: {\n            textAlign: 'center'\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 246\n          },\n          __self: this\n        }, st.rawData.fwRaw[0][index]), React.createElement(\"td\", {\n          style: {\n            textAlign: 'center'\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 247\n          },\n          __self: this\n        }, st.rawData.fwRaw[1][index]), React.createElement(\"td\", {\n          style: {\n            textAlign: 'center'\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 248\n          },\n          __self: this\n        }, st.rawData.fwRaw[2][index]), React.createElement(\"td\", {\n          style: {\n            textAlign: 'center'\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 249\n          },\n          __self: this\n        }, st.rawData.newfw[index].toFixed(2)));\n      }) : '')), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 253\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        style: {\n          background: 'white',\n          textAlign: 'center',\n          marginBottom: '5px',\n          borderRadius: '5px'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 254\n        },\n        __self: this\n      }, \"Dry Weight Test\"), React.createElement(\"table\", {\n        style: {\n          width: '100%'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 255\n        },\n        __self: this\n      }, React.createElement(\"thead\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 256\n        },\n        __self: this\n      }, React.createElement(\"tr\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 257\n        },\n        __self: this\n      }, ['', 'R1', 'R2', 'R3', 'AVERAGE'].map(function (head) {\n        return React.createElement(\"th\", {\n          key: head,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 258\n          },\n          __self: this\n        }, head);\n      }))), React.createElement(\"tbody\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 261\n        },\n        __self: this\n      }, gDp(st, 'rawData.bwRaw', []).length ? [1, 2, 3, 4, 5, 6, 7, 8].map(function (row, index) {\n        return React.createElement(\"tr\", {\n          key: index,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 262\n          },\n          __self: this\n        }, React.createElement(\"td\", {\n          style: {\n            textAlign: 'center'\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 263\n          },\n          __self: this\n        }, \"T\", index + 1), React.createElement(\"td\", {\n          style: {\n            textAlign: 'center'\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 264\n          },\n          __self: this\n        }, st.rawData.bwRaw[0][index]), React.createElement(\"td\", {\n          style: {\n            textAlign: 'center'\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 265\n          },\n          __self: this\n        }, st.rawData.bwRaw[1][index]), React.createElement(\"td\", {\n          style: {\n            textAlign: 'center'\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 266\n          },\n          __self: this\n        }, st.rawData.bwRaw[2][index]), React.createElement(\"td\", {\n          style: {\n            textAlign: 'center'\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 267\n          },\n          __self: this\n        }, st.rawData.newbw[index].toFixed(2)));\n      }) : '')))));\n    }\n  }]);\n\n  return PrintReport;\n}(Component);\n\nexport default withRouter(PrintReport);","map":{"version":3,"sources":["/home/cdi_5/Downloads/agri_thesis_front/src/components/PrintReport.js"],"names":["React","Component","withRouter","API","moment","gDp","Row","Col","Button","BarChart","Bar","Cell","XAxis","YAxis","CartesianGrid","Tooltip","Legend","ResponsiveContainer","qs","require","month","Array","PrintReport","urlSearch","parse","props","history","location","search","state","report","annual_report","pageState","start_date","end_date","apiRetrieve","st","id","match","params","console","log","getReport","then","response","latestReport","data","length","newfw","JSON","avgfw","newbw","avgbw","fwRaw","fw","split","bwRaw","bw","newReport","fw1","bw1","fw2","bw2","fw3","bw3","fw4","bw4","fw5","bw5","fw6","bw6","fw7","bw7","fw8","bw8","setState","rawData","setTimeout","window","print","close","err","finally","isLoading","apiAverage","getAverageReports","avg_fw1","avg_bw1","avg_fw2","avg_bw2","avg_fw3","avg_bw3","avg_fw4","avg_bw4","avg_fw5","avg_bw5","avg_fw6","avg_bw6","avg_fw7","avg_bw7","avg_fw8","avg_bw8","apiAnnual","getAnnualReport","map","months","Month","pr","pathname","isReportId","includes","name","is_annual","fontSize","format","top","right","left","bottom","value","angle","position","background","textAlign","marginBottom","borderRadius","width","head","row","index","toFixed"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport { withRouter } from 'react-router-dom' \nimport * as API from '../services/API'\nimport moment from 'moment';\nimport { gDp } from '../helpers/helpers'\nimport { Row, Col, Button } from 'reactstrap'\nimport {\n    BarChart, Bar, Cell, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer\n} from 'recharts';\n\nconst qs = require('query-string');\nvar month = new Array();\nmonth[0] = \"January\";\nmonth[1] = \"February\";\nmonth[2] = \"March\";\nmonth[3] = \"April\";\nmonth[4] = \"May\";\nmonth[5] = \"June\";\nmonth[6] = \"July\";\nmonth[7] = \"August\";\nmonth[8] = \"September\";\nmonth[9] = \"October\";\nmonth[10] = \"November\";\nmonth[11] = \"December\";\n\nclass PrintReport extends Component {\n    urlSearch = qs.parse(this.props.history.location.search)\n    state={\n        report: [],\n        annual_report: [],\n        pageState: {\n            start_date: this.urlSearch.start_date,\n            end_date: this.urlSearch.end_date\n        },\n    }\n\n    apiRetrieve = () => {\n        const st = this.state\n        const {id} = this.props.match.params\n        const params = {\n            start_date: st.pageState.start_date || '',\n            end_date: st.pageState.end_date || ''\n        }\n        !st.pageState.start_date && delete params.start_date\n        !st.pageState.end_date && delete params.end_date\n        console.log('Hello')\n        API.getReport(params,id)\n        .then((response)=>{\n            const latestReport = response.data[response.data.length-1]\n            const newfw = JSON.parse(latestReport.avgfw)\n            const newbw = JSON.parse(latestReport.avgbw)\n            const fwRaw = [JSON.parse(latestReport.fw.split(\":\")[0]),JSON.parse(latestReport.fw.split(\":\")[1]),JSON.parse(latestReport.fw.split(\":\")[2])]\n            const bwRaw = [JSON.parse(latestReport.bw.split(\":\")[0]),JSON.parse(latestReport.bw.split(\":\")[1]),JSON.parse(latestReport.bw.split(\":\")[2])]\n            const newReport = [\n                {\n                    ...response.data[response.data.length-1],\n                    fw1: newfw[0], bw1: newbw[0],\n                    fw2: newfw[1], bw2: newbw[1],\n                    fw3: newfw[2], bw3: newbw[2],\n                    fw4: newfw[3], bw4: newbw[3],\n                    fw5: newfw[4], bw5: newbw[4],\n                    fw6: newfw[5], bw6: newbw[5],\n                    fw7: newfw[6], bw7: newbw[6],\n                    fw8: newfw[7], bw8: newbw[7],\n                }\n            ]\n            this.setState({report: newReport, rawData: {fwRaw, bwRaw, newfw, newbw}},()=>{\n                setTimeout(()=>{\n                    window.print();\n                    setTimeout(window.close, 0);\n                }, 500)\n            })\n            // this.setState({report: response.data},()=>{\n            //     setTimeout(()=>{\n            //         window.print();\n            //         setTimeout(window.close, 0);\n            //     }, 500)\n            // })\n        }, err => {\n            \n        }).finally(()=> \n            this.setState({isLoading: false})\n        )\n    }\n\n    apiAverage = () => {\n        const st = this.state\n        const {id} = this.props.match.params\n        const params = {\n            start_date: st.pageState.start_date || '',\n            end_date: st.pageState.end_date || ''\n        }\n        !st.pageState.start_date && delete params.start_date\n        !st.pageState.end_date && delete params.end_date\n        API.getAverageReports(params)\n        .then((response)=>{\n            const report = [{...response.data,\n                fw1: response.data.avg_fw1, bw1: response.data.avg_bw1,\n                fw2: response.data.avg_fw2, bw2: response.data.avg_bw2,\n                fw3: response.data.avg_fw3, bw3: response.data.avg_bw3,\n                fw4: response.data.avg_fw4, bw4: response.data.avg_bw4,\n                fw5: response.data.avg_fw5, bw5: response.data.avg_bw5,\n                fw6: response.data.avg_fw6, bw6: response.data.avg_bw6,\n                fw7: response.data.avg_fw7, bw7: response.data.avg_bw7,\n                fw8: response.data.avg_fw8, bw8: response.data.avg_bw8,\n            }]\n            this.setState({report: report},()=>{\n                setTimeout(()=>{\n                    window.print();\n                    setTimeout(window.close, 0);\n                }, 500)\n            })\n        }, err => {\n            \n        }).finally(()=> \n            this.setState({isLoading: false})\n        )\n    }\n\n    apiAnnual = () => {\n        const st = this.state\n        this.setState({isLoading: true})\n        console.log('isAnnual')\n        API.getAnnualReport()\n        .then((response)=>{\n            const report = response.data.map((months)=> {return {...months, Month: month[months.Month-1]}})\n            \n            this.setState({annual_report: report})\n        }, err => {\n            // TOAST.pop({message: err.message, type: 'error'})\n        }).finally(()=> \n            this.setState({isLoading: false},()=>{\n                setTimeout(()=>{\n                    window.print();\n                    setTimeout(window.close, 0);\n                }, 500)\n            })\n        )\n    }\n\n    componentDidMount(){\n        const pr = this.props\n        const {id} = this.props.match.params\n        console.log(pr)\n        console.log(pr.location.pathname, pr.location.pathname==='/report/print/average')\n        if(pr.location.pathname==='/report/print/annual'){\n            this.apiAnnual()\n        } else if(pr.location.pathname==='/report/print/average'){\n            this.apiAverage()\n        } else {\n            this.apiRetrieve()\n        }\n    }\n\n    render() {\n        const st = this.state;\n        const {id} = this.props.match.params\n        const isReportId = !['/report/print/annual','/report/print/average'].includes(this.props.location.pathname)\n        const data = st.report.length ? [\n            {\n                name: 'T1', fw: st.report[0].fw1, bw: st.report[0].bw1\n            },\n            {\n                name: 'T2', fw: st.report[0].fw2, bw: st.report[0].bw2\n            },\n            {\n                name: 'T3', fw: st.report[0].fw3, bw: st.report[0].bw3\n            },\n            {\n                name: 'T4', fw: st.report[0].fw4, bw: st.report[0].bw4\n            },\n            {\n                name: 'T5', fw: st.report[0].fw5, bw: st.report[0].bw5\n            },\n            {\n                name: 'T6', fw: st.report[0].fw6, bw: st.report[0].bw6\n            },\n            {\n                name: 'T7', fw: st.report[0].fw7, bw: st.report[0].bw7\n            },\n            {\n                name: 'T8', fw: st.report[0].fw8, bw: st.report[0].bw8\n            },\n        ] : ''\n        const is_annual = this.props.location.pathname==='/report/print/annual'\n        console.log(st.report, this.props, st)\n        return (\n            <div>\n                <div style={{}}>\n                    <strong style={{fontSize: '24px'}}><span style={{fontSize: '36px'}}>{st.report.length ? st.report[0].name : st.annual_report.length ? 'Annual' : 'Average'}</span>&nbsp;{st.pageState.start_date ? `(${moment(st.pageState.start_date).format('MMMM DD YYYY')}` : ''} {st.pageState.end_date ? `- ${moment(st.pageState.end_date).format('MMMM DD YYYY')})` : ''}</strong>\n                </div>\n                <Row>\n                    <Col md={isReportId ? \"10\": \"12\"}>\n                        {is_annual ? \n                            <ResponsiveContainer>\n                                <BarChart\n                                    // width={800}\n                                    // height={300}\n                                    data={st.annual_report}\n                                    margin={{\n                                    top: 30, right: 15, left: 5, bottom: 15,\n                                    }}\n                                >\n                                    <XAxis dataKey=\"Month\" tickSize\n                                        dy='25'/>\n                                    <YAxis label={{ value: 'Average Weight', angle: -90, position: 'insideLeft' }}/>\n                                    <CartesianGrid strokeDasharray=\"3 3\" />\n                                    {/* <Tooltip /> */}\n                                    <Legend />\n                                    <Bar name=\"Fresh Weight Test\" dataKey=\"avg_fw\" fill=\"#82ca9d\"/>\n                                    <Bar name=\"Dry Weight Test\" dataKey=\"avg_bw\" fill=\"#8884d8\"/>\n                                </BarChart>\n                            </ResponsiveContainer>:\n                            <ResponsiveContainer>\n                                <BarChart\n                                    // width={800}\n                                    // height={300}\n                                    data={data}\n                                    margin={{\n                                    top: 30, right: 15, left: 5, bottom: 15,\n                                    }}\n                                >\n                                    <XAxis dataKey=\"name\" tickSize\n                                        dy='25'/>\n                                    <YAxis label={{ value: 'Average Weight', angle: -90, position: 'insideLeft' }}/>\n                                    <CartesianGrid strokeDasharray=\"3 3\" />\n                                    {/* <Tooltip /> */}\n                                    <Legend />\n                                    <Bar name=\"Fresh Weight Test\" dataKey=\"fw\" fill=\"#82ca9d\"/>\n                                    <Bar name=\"Dry Weight Test\" dataKey=\"bw\" fill=\"#8884d8\"/>\n                                </BarChart>\n                            </ResponsiveContainer>\n                        }\n                    </Col>\n                    {isReportId && <Col>\n                        <div style={{background: 'white', textAlign: 'center', marginBottom: '5px', borderRadius: '5px'}}>Fresh Weight Test</div>\n                        <table style={{width:'100%'}}>\n                            <thead>\n                                <tr>\n                                    {['','R1','R2','R3','AVERAGE'].map((head)=><th key={head}>{head}</th>)}\n                                </tr>\n                            </thead>\n                            <tbody>\n                                {gDp(st,'rawData.fwRaw',[]).length ? [1,2,3,4,5,6,7,8].map((row, index)=> <tr key={index}>\n                                    <td style={{textAlign: 'center'}}>T{index+1}</td>\n                                    <td style={{textAlign: 'center'}}>{st.rawData.fwRaw[0][index]}</td>\n                                    <td style={{textAlign: 'center'}}>{st.rawData.fwRaw[1][index]}</td>\n                                    <td style={{textAlign: 'center'}}>{st.rawData.fwRaw[2][index]}</td>\n                                    <td style={{textAlign: 'center'}}>{st.rawData.newfw[index].toFixed(2)}</td>\n                                </tr>): ''}\n                            </tbody>\n                        </table>\n                        <br/>\n                        <div style={{background: 'white', textAlign: 'center', marginBottom: '5px', borderRadius: '5px'}}>Dry Weight Test</div>\n                        <table style={{width:'100%'}}>\n                            <thead>\n                                <tr>\n                                    {['','R1','R2','R3','AVERAGE'].map((head)=><th key={head}>{head}</th>)}\n                                </tr>\n                            </thead>\n                            <tbody>\n                                {gDp(st,'rawData.bwRaw',[]).length ? [1,2,3,4,5,6,7,8].map((row, index)=> <tr key={index}>\n                                    <td style={{textAlign: 'center'}}>T{index+1}</td>\n                                    <td style={{textAlign: 'center'}}>{st.rawData.bwRaw[0][index]}</td>\n                                    <td style={{textAlign: 'center'}}>{st.rawData.bwRaw[1][index]}</td>\n                                    <td style={{textAlign: 'center'}}>{st.rawData.bwRaw[2][index]}</td>\n                                    <td style={{textAlign: 'center'}}>{st.rawData.newbw[index].toFixed(2)}</td>\n                                </tr>): ''}\n                            </tbody>\n                        </table>\n                    </Col>}\n                </Row>\n            </div>\n        );\n    }\n}\n\nexport default withRouter(PrintReport);"]},"metadata":{},"sourceType":"module"}